class TrieNode {
public:
	// Initialize your data structure here.
	char var;
	bool isWord;
	TrieNode* children[26];
	TrieNode() {
		var = '\0';
		isWord = false;
		memset(children, 0, sizeof(TrieNode*) * 26);
	}
	TrieNode(char c) {
		var = 'c';
		isWord = false;
		memset(children, 0, sizeof(TrieNode*) * 26);
	}
	//~TrieNode()
	//{
	//	delete[] children;
	//}
};

class Trie {
public:
	Trie() {
		root = new TrieNode();
	}

	// Inserts a word into the trie.
	void insert(string word) {
		TrieNode* p = root;
		if (word.length() == 0) return;
		for (int i = 0; i < word.length(); i++)
		{
			char c = word[i];
			if (p->children[c - 'a'] == nullptr)
			{
				TrieNode* pnew = new TrieNode(c);
				p->children[c - 'a'] = pnew;
			}
			p = p->children[c - 'a'];
		}
		p->isWord = true;
	}

	// Returns if the word is in the trie.
	bool search(string word) {
		TrieNode* p = root;
		if (word.length() == 0) return true;
		for (int i = 0; i < word.length(); i++)
		{
			char c = word[i];
			p = p->children[c-'a'];
			if (p == nullptr) return false;
		}
		return p->isWord;
	}

	// Returns if there is any word in the trie
	// that starts with the given prefix.
	bool startsWith(string prefix) {
		TrieNode* p = root;
		if (prefix.length() == 0) return true;
		for (int i = 0; i < prefix.length(); i++)
		{
			char c = prefix[i];
			p = p->children[c-'a'];
			if (p == nullptr) return false;
		}
		return true;
	}

	void freeTrieNode(TrieNode* pNode) {
		if (pNode == nullptr)
			return;
		for (int i = 0; i<26; i++)
		{
			TrieNode* pChild = pNode->children[i];
			if (pChild != nullptr)
			{
				freeTrieNode(pChild);
			}
		}
		free(pNode);
	}

	~Trie(){
		freeTrieNode(root);
	}

private:
	TrieNode* root;
};
